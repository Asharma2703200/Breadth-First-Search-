class Solution {
    static class Pair{
        int i;
        int j;
        int dist;
        Pair(int i , int j , int dist){
            this.i = i;
            this.j = j;
            this.dist = dist;
        }
    }
    public int[][] updateMatrix(int[][] mat) {
        int[][] ans = new int[mat.length][mat[0].length];
        Queue<Pair> q = new LinkedList<>();
        for(int i = 0 ; i < mat.length ; i++){
            for(int j = 0 ; j < mat[0].length ; j++){
                if(mat[i][j] == 0){
                    q.add(new Pair(i , j , 0));
                    ans[i][j] = 0;
                }else{
                    ans[i][j] = -1;
                }
            }
        }
        
        int[][] dir = {{-1,0},{1,0},{0,-1},{0,1}};
        
        while(q.size() > 0){
            Pair p = q.remove();
            
            for(int[] d : dir){
                int r = d[0] + p.i;
                int c = d[1] + p.j;
                
                if(r < 0 || c < 0 || r >= mat.length || c >= mat[0].length || ans[r][c] != -1){
                    continue;
                }
                ans[r][c] = p.dist +1;
                q.add(new Pair(r , c , p.dist + 1));
            }
        }
        return ans;
    }
}
