 class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        
        int[][] dp = new int[n][m];
        
        int[][] dir = {{-1 , 0} , {0, 1 }, {1, 0},{0 , -1}};
        
        int LongestPath = 1;
        
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                LongestPath = Math.max(LongestPath , DepthFirstSearch(matrix , i , j , dp , dir));
            }
        }
        return LongestPath;
    }
    public int DepthFirstSearch(int[][] matrix , int i , int j , int[][] dp, int[][] dir){
        
        if(dp[i][j] != 0){
            return dp[i][j];
        }
        
        int max = 0;
        
        for(int d = 0 ; d < dir.length;d++){
            int r = i + dir[d][0];
            int c = j + dir[d][1];
            
            if(r >= 0 && c >= 0 && r < matrix.length && c < matrix[0].length && matrix[r][c] > matrix[i][j]){
                max = Math.max(max , DepthFirstSearch(matrix , r , c , dp , dir));
            }
            
        }
        return dp[i][j] = max + 1;
    }
}
